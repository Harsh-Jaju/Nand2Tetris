// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
    myMux16(a=instruction, b=aluOUT, sel=instruction[15], out=mux16aOUT);

    myNot(in=instruction[15], out=noti15);
    myOr(a=noti15, b=instruction[5], out=loadA);
    ARegister(in=mux16aOUT, load=loadA, out[0..14]=addressM, out=aOUT);

    myMux16(a=aOUT, b=inM, sel=instruction[12], out=mux16bOUT);
    ALU(x=dOUT, y=mux16bOUT, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOUT, zr=zrOUT, ng=ngOUT);

    myAnd(a=instruction[15], b=instruction[3], out=writeM);

    myAnd(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOUT, load=loadD, out=dOUT);

    // Jump conditions
    myAnd(a=instruction[15], b=instruction[0], out=j3);
    myAnd(a=instruction[15], b=instruction[1], out=j2);
    myAnd(a=instruction[15], b=instruction[2], out=j1);
    myNot(in=j3, out=nj3);
    myAnd(a=instruction[15], b=nj3, out=notj3);
    myNot(in=j2, out=nj2);
    myAnd(a=instruction[15], b=nj2, out=notj2);
    myNot(in=j1, out=nj1);
    myAnd(a=instruction[15], b=nj1, out=notj1);
    myNot(in=zrOUT, out=notzr);
    myNot(in=ngOUT, out=notng);

    myAnd(a=notj1, b=notj2, out=JGTjCond1);
    myAnd(a=JGTjCond1, b=j3, out=JGTjCond);
    myAnd(a=notzr, b=notng, out=JGToutCond);
    myAnd(a=JGTjCond, b=JGToutCond, out=JGTcond);

    myAnd(a=notj1, b=j2, out=JEQjCond1);
    myAnd(a=JEQjCond1, b=notj3, out=JEQjCond);
    myAnd(a=JEQjCond, b=zrOUT, out=JEQcond);

    myAnd(a=notj1, b=j2, out=JGEjCond1);
    myAnd(a=JGEjCond1, b=j3, out=JGEjCond);
    myAnd(a=JGEjCond, b=notng, out=JGEcond);

    myAnd(a=j1, b=notj2, out=JLTjCond1);
    myAnd(a=JLTjCond1, b=notj3, out=JLTjCond);
    myAnd(a=JLTjCond, b=ngOUT, out=JLTcond);

    myAnd(a=j1, b=notj2, out=JNEjCond1);
    myAnd(a=JNEjCond1, b=j3, out=JNEjCond);
    myAnd(a=JNEjCond, b=notzr, out=JNEcond);

    myAnd(a=j1, b=j2, out=JLEjCond1);
    myAnd(a=JLEjCond1, b=notj3, out=JLEjCond);
    myOr(a=zrOUT, b=ngOUT, out=JLEoutCond);
    myAnd(a=JLEjCond, b=JLEoutCond, out=JLEcond);

    myAnd(a=j1, b=j2, out=JMPjCond1);
    myAnd(a=JMPjCond1, b=j3, out=JMPcond);

    myOr(a=JGTcond, b=JEQcond, out=JGTorJEQ);
    myOr(a=JGEcond, b=JLTcond, out=JGEorJLT);
    myOr(a=JNEcond, b=JLEcond, out=JNEorJLE);

    myOr(a=JGTorJEQ, b=JGEorJLT, out=JGTorJEQorJGEorJLT);
    myOr(a=JNEorJLE, b=JMPcond, out=JNEorJLEorJMP);

    myOr(a=JGTorJEQorJGEorJLT, b=JNEorJLEorJMP, out=JumpCond);

    // Program Counter
    PC(in=aOUT, reset=reset, load=JumpCond, inc=true, out[0..14]=pc);

}